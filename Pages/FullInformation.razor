@page "/fullinformation"
@page "/fullinformation/{id:int}"

@if (Id == null)
{
    <h3>Create a new Contact</h3>
}
else
{
    <h3>Edit @Id</h3>
}

<h3>contacts</h3>

<table class="table">
    <thead>
        <tr>

            <th>Id</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>EmailName</th>
            <th>PhoneNumber</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in contacts)
        {
            <tr>
                <td>@contact.Id</td>
                <td>@contact.FirstName</td>
                <td>@contact.LastName</td>
                <td>@contact.Email</td>
                <td>@contact.PhoneNumber</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => EditContact(contact.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick="CreateContact">Create New Contact</button>

<hr />

<EditForm Model="contact" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="id">Id</label>
        <InputNumber id="id" @bind-Value="contact.Id" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => contact.Id)" />
    </div>
    <div>
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="contact.FirstName" class="form-control"></InputText>
        <ValidationMessage For="@(() => contact.FirstName)" />
    </div>
    <div>
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="contact.LastName" class="form-control"></InputText>
        <ValidationMessage For="@(() => contact.LastName)" />
    </div>
    <div>
        <label for="Email">Email</label>
        <InputText id="Email" @bind-Value="contact.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => contact.Email)" />
    </div>
    <div>
        <label for="PhoneNumber">PhoneNumber</label>
        <InputTextArea id="PhoneNumber" @bind-Value="contact.PhoneNumber" class="form-control"></InputTextArea>
        <ValidationMessage For="@(() => contact.PhoneNumber)" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@(NewContact ? "Create contact" : "Update contact")</button>
    @if (!NewContact)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteContact">Delete Contact</button>
    }

</EditForm>

@if (showDeleteConfirmation)
{
    <div style="position:fixed;top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    background-color: antiquewhite;
    padding: 50px;
    border: 1px solid #ccc" class="confirmationModel">
        <h3>Confirm deletion</h3>
        <div>
            <button type="button" class="btn btn-danger" @onclick="DeleteContacts">Delete contact</button>
            <button type="button" class="btn btn-primary" @onclick="CancelDelete">No</button>
        </div>
    </div>

}
@code {
    [Parameter]
    public int? Id { get; set; }

    private bool showDeleteConfirmation = false;
    private int deleteId;
    static List<Models.Contact> contacts = new List<Models.Contact>
    {
        new Models.Contact
        {
            Id = 1,
            FirstName = "Rafat ",
            LastName = "Saqqa.",
            Email = "raafat.saqqa@gmail.com",
            PhoneNumber = "0777396184",
        },
          new Models.Contact
        {
            Id = 2,
            FirstName = "Peter",
            LastName = "Parker.",
            Email = "PeterParker@gmail.com",
            PhoneNumber = "0793110242",
        }
        ,
          new Models.Contact
        {
            Id = 3,
            FirstName = "Joy",
            LastName = "Ammer.",
            Email = "JoyAmmer@gmail.com",
            PhoneNumber = "077740295",
        }
    };

    Models.Contact contact = new Models.Contact();
    bool NewContact = true;

    private void EditContact(int id)
    {
        var result = contacts.Find(c => c.Id == id);
        if (result != null)
        {
            contact = result;
            NewContact = false;
        }
    }

    private void HandleSubmit()
    {
        if (NewContact)
        {
            contacts.Add(contact);
            // contacts.OrderBy
        }
    }

    private void CreateContact()
    {
        Console.WriteLine("Hello");
        contact = new Models.Contact();

        NewContact = true;
    }

    private void DeleteContact()
    {
        showDeleteConfirmation = true;
    }


    private void DeleteModel(int id)
    {
        deleteId = id;

        showDeleteConfirmation = true;

    }
    private void DeleteContacts()
    {
        contacts.Remove(contact);
        CancelDelete();
    }
    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        deleteId = 0;
    }

}
